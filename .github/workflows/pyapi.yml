name: Build Python Wheel

on:
  push:
    branches:
      - master

jobs:
  Ubuntu:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install Docker
        run: |
          sudo apt-get update

      - name: Build manylinux wheel
        run: |
            chmod a+x .github/workflows/build_linux.sh
            docker run --rm -v $(pwd):/io quay.io/pypa/manylinux2014_x86_64 /io/.github/workflows/build_linux.sh
            echo "Finished!!"
      
      - name: Remove some whl
        run: |
            sudo rm -rf ./dist/*-linux*.whl ./dist/*2_*\.*2014*.whl
            ls ./dist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux_wheels
          path: ./dist/*.whl


  Windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13.5'] 

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel pybind11

      - name: Build Windows wheel
        run: |
          python setup.py bdist_wheel

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Windows_wheels-${{matrix.python-version}}
          path: ./dist/*.whl
  
  # refer to https://github.com/endless-sky/endless-sky/blob/master/.github/workflows/cd.yaml
  Release:
    needs: [Ubuntu, Windows]
    runs-on: ubuntu-latest

    env:
        RELEASE_COMMAND: release
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_TAG: bleed
        OUTPUT_TAR: MSDump_Wheels.tar.gz

    steps:
      - uses: actions/checkout@v4

      - name: Install github-release
        run: |
          go install github.com/github-release/github-release@latest
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
      - name: Set environment variables
        run: |
          echo "RELEASE_TAG=bleed" >> $GITHUB_ENV
          echo "TIME=$(date -u '+%Y.%m.%d')" >> $GITHUB_ENV
          echo "GITHUB_USER=$( echo ${{ github.repository }} | cut -d/ -f1 )" >> $GITHUB_ENV
          echo "GITHUB_REPO=$( echo ${{ github.repository }} | cut -d/ -f2 )" >> $GITHUB_ENV

      - name: Move/Create continuous tag
        run: |
          git tag --force ${{ env.RELEASE_TAG }} ${{ github.sha }}
          git push --tags --force
      
      - name: Check continuous release status
        run: |
          if ! github-release info -t ${{ env.RELEASE_TAG }} > /dev/null 2>&1; then
            echo "RELEASE_COMMAND=release" >> $GITHUB_ENV
          else
            echo "RELEASE_COMMAND=edit" >> $GITHUB_ENV
          fi
      
      - name: Setup continuous release
        run: |
          DESCRIPTION="Triggered on $(date -u '+%Y/%m/%d, %H:%M') UTC by commit ${{ github.sha }} (@${{ github.actor }})
          This is an automated build of the latest source. It may be unstable or even crash, corrupt your save or eat your kitten. Use with caution!
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          github-release ${{env.RELEASE_COMMAND}} --tag ${{ env.RELEASE_TAG }} --name "Latest Bleed Release" --description "$DESCRIPTION" --pre-release
      
      - name: Download Ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: Linux_wheels

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          pattern: Windows_wheels-*
          merge-multiple: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          ls -alt
          pip install *-cp38-cp38-manylinux*.whl
          
      - name: Test Import
        run: |
          python -c "from PyMSDump import TrajLoad; print(TrajLoad.__version__())"
        
      - name: Package Linux and Windows artifact to release
        run: |
          tar -czvf ${{env.OUTPUT_TAR}} *.whl
          github-release upload --tag ${{ env.RELEASE_TAG }} --replace --name ${{env.OUTPUT_TAR}} --file ${{env.OUTPUT_TAR}}
